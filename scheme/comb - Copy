(define (best-combination demons-list amt)
  (define (loop amt denoms comb cur-denom-cnt)    
    (if (null? denoms) comb
        (if (> (car denoms) amt )
            (loop amt (cdr denoms) (append comb `(,cur-denom-cnt)) 0)
            (loop (- amt (car denoms)) denoms comb (+ cur-denom-cnt 1))
            )
        )
    )
  (if (null? demons-list) `()
      (loop amt demons-list `() 0)
      )
  )

(define (combination amount demoninations)
  (define (sub-comb comb)
    (map (Î» (item) (append `(,(car comb)) item)) 
         (combination (- amount (* (car comb) (car demoninations))) (cdr demoninations))
         )
    )
  (define (iter comb comb-list)
    (if (or (<= (length comb) 1) (= 0 (car comb))) comb-list 
            (iter (--head comb) (append comb-list (sub-comb (--head comb))))            
        )
    )
  (define (do-comb best-comb)
    (if (= 0 (car best-comb)) (sub-comb best-comb)
         (append `(,best-comb) (iter best-comb `()))
         )
    )
  (do-comb (best-combination demoninations amount))
  )

(define (--head list)      
  (append  `(,(- (car list) 1)) (cdr list))
  )

;(combination 100 `(25 10 5 1) )
(equal? (combination  25 `(25 10 5 1)) `((1 0 0 0) (0 2 1 0) (0 1 3 0) (0 1 2 5) (0 1 1 10) (0 1 0 15) (0 0 5 0) (0 0 4 5) (0 0 3 10) (0 0 2 15) (0 0 1 20) (0 0 0 25)))
(equal? (combination 10 `(5 1)) '((2 0) (1 5) (0 10)))
(equal? (combination 10 `(50 25 10 5 1) ) `((0 0 1 0 0) (0 0 0 2 0) (0 0 0 1 5) (0 0 0 0 10)))
(equal? (best-combination `(25 10 5 1) 41)    `(1 1 1 1))
(equal? (best-combination `(25 10 5 1) 12)    `(0 1 0 2))
(equal? (best-combination `(25 10 5 1) 100)   `(4 0 0 0))
(equal? (best-combination `(25 10 5 1) 110)   `(4 1 0 0))
(equal? (best-combination `(25 10 5 1) 115)   `(4 1 1 0))
(equal? (best-combination `(25 10 5 1) 116)   `(4 1 1 1))
(equal? (best-combination `(25 10 5 1) 121)   `(4 2 0 1))
(equal? (best-combination `(25 10 5 1) 22)    `(0 2 0 2))
(equal? (best-combination `(25 10 5 1) 286)   `(11 1 0 1))
