import numpy as np
from simplex import simplex as simplexfunc
from optimize import optimize as optimizefunc
from pivot import UNBOUNDED
from initialize import Infeasible

'I love numpy thats 10 classes of java code in one line'
def dual(dictionary):
    return -np.vstack((np.c_[dictionary[-1,1:].H,dictionary[:-1,1:].H],
                       np.c_[dictionary[-1,0],dictionary[:-1,0].H]))


def simplex(dictionary, basic_vars, non_basic_vars):
    final_dict, basic, non_basic = simplexfunc(dual(dictionary), non_basic_vars, basic_vars)
    return dual(final_dict), non_basic, basic


def optimize(dictionary, basic_vars, non_basic_vars):
    dict_ = dual(dictionary)
    status, optimal_value = optimizefunc(dict_, non_basic_vars, basic_vars)
    if status == UNBOUNDED:
        raise Infeasible()
    
    #print("final dual", dict_)
    return dual(dict_), basic_vars, non_basic_vars


############################## TESTS ##############################
from pytest import fixture, mark

@fixture
def dictionary():
    return np.mat('''4.33333333333       0.333333     0.666667      -0.333333;
                        8.66666666667    -0.333333    0.333333      -2.66666666667;
                        10               0            0             -1;
                        3                -3           1             -18;
                        5.66666666667    -0.333333    -0.6666666667 0.333333;
                        1.333333         0.333333     -0.333333     2.6666666667;
                        -0.333333        0.6666666667 0.333333      0.333333;    
                        -0.6666666667    0.333333     0.6666666667  0.6666666667;
                        -0.6666666667    0.333333     0.6666666667  0.6666666667;
                        -0.333333        0.6666666667 0.333333      0.333333;    
                        7                0             -1            -2''')
    
def should_dualize(dictionary):
    dual_ = dual(dictionary)
    assert np.all(dictionary[:-1,1:].H == -dual_[:-1,1:])
    assert dictionary[-1,0] == -dual_[-1,0]
    assert np.all(dictionary[-1,1:].H == -dual_[:-1,0])
    assert np.all(dictionary[:-1,0].H == -dual_[-1,1:])
    assert np.all(dictionary==dual(dual_))


def should_optimize(dictionary):
    sim_dict, sim_basic, sim_non_basic = simplex(dictionary, np.array([4, 5, 6, 7, 1, 2, 10, 11, 12, 13]), np.array([8, 9, 3]))
    opt_dict, opt_basic, opt_non_basic = optimize(dictionary, np.array([4, 5, 6, 7, 1, 2, 10, 11, 12, 13]), np.array([8, 9, 3]))
    assert np.all(opt_dict == sim_dict)
    assert np.all(opt_basic == sim_basic)
    assert np.all(opt_non_basic == sim_non_basic)
    assert np.all(sim_non_basic == np.array([11, 7, 3]))
    assert np.all(sim_basic == np.array([4, 5, 6, 9, 1, 2, 8, 10, 12, 13]))
    assert abs(6.57142857143 - sim_dict[-1, 0]) <= 0.0001 and  abs(6.57142857143 - opt_dict[-1, 0]) < 0.0001

@mark.parametrize(("dictionary","basic_vars", "non_basic_vars", "optimal_value"), [
    (np.mat("1 -0.166667 0.166667; 1.5 -.250 -.250;-.5 .250 .250; 1.5 -.250 -.250"),
    np.array([1, 2, 5]), np.array([3, 4]), 1)
])
def should_dual_optimize(dictionary, basic_vars, non_basic_vars, optimal_value):
    dict_, _, _ = optimize(dictionary, basic_vars, non_basic_vars)
    assert optimal_value == dict_[-1, 0]
    #assert abs(optimal_value - dict_[-1, 0]) < 0.0000000000001
    
def should_dualize_large():
    dictionary = np.mat([
        [  2.19714286e+01,  -1.40714286e+01,   3.28571429e+00,   6.71428571e+00],
        [  1.74238095e+01,  -1.24571429e+01,   2.09523810e+00,   6.57142857e+00],
        [  1.58507937e+01,  -1.34285714e+01,   6.26984127e+00,   2.61904762e+00],
        [  1.15873016e+00,  -8.14285714e-01,   9.68253968e-01,   8.09523810e-01],
        [  7.26666667e+00,  -6.00000000e-01,  -1.33333333e+00,   3.00000000e+00],
        [  5.07142857e+00,  -2.77142857e+00,  -3.71428571e+00,   6.71428571e+00],
        [  2.20634921e+00,  -1.42857143e+00,   1.58730159e-01,   9.52380952e-01],
        [  4.03650794e+00,  -2.51428571e+00,  -1.58730159e+00,   4.47619048e+00],
        [  3.55238095e+00,  -2.18571429e+00,  -1.19047619e+00,   3.85714286e+00],
        [  3.92857143e+00,  -2.62857143e+00,  -2.28571429e+00,   5.28571429e+00],
        [  2.86825397e+00,  -1.45714286e+00,  -7.93650794e-01,   3.23809524e+00],
        [  4.46984127e+00,  -2.71428571e+00,  -3.25396825e+00,   6.47619048e+00],
        [  4.11111111e-01,   2.80000000e+00,  -5.22222222e+00,   1.66666667e+00],
        [  1.04126984e+00,  -8.57142857e-02,   1.03174603e+00,   1.90476190e-01],
        [  1.06349206e+00,  -1.28571429e+00,   1.58730159e+00,  -4.76190476e-01],
        [  5.38095238e-01,  -5.71428571e-01,   9.52380952e-01,   7.14285714e-01],
        [  5.38095238e-01,   4.28571429e-01,  -4.76190476e-02,   7.14285714e-01],
        [  6.01587302e-01,  -5.71428571e-02,  -4.60317460e-01,   1.23809524e+00],
        [  5.38095238e-01,  -5.71428571e-01,   9.52380952e-01,   7.14285714e-01],
        [  4.58730159e-01,   8.57142857e-02,   9.68253968e-01,  -1.90476190e-01],
        [  9.17460317e-01,  -3.28571429e-01,   9.36507937e-01,   6.19047619e-01],
        [  7.93650794e-02,   3.42857143e-01,  -1.58730159e-02,   9.04761905e-01],
        [  4.33333333e-01,  -1.00000000e+00,   1.33333333e+00,  -1.11022302e-15],
        [  1.13968254e+00,  -6.28571429e-01,   4.92063492e-01,   9.52380952e-01],
        [ -9.71428571e-01,   7.14285714e-02,   7.14285714e-01,   2.85714286e-01],
        [ -4.23809524e-01,   4.57142857e-01,   9.04761905e-01,   4.28571429e-01],
        [ -8.50793651e-01,   4.28571429e-01,   7.30158730e-01,   3.80952381e-01],
        [ -1.58730159e-01,   8.14285714e-01,   3.17460317e-02,   1.90476190e-01],
        [ -2.66666667e-01,   6.00000000e-01,   3.33333333e-01,   1.00000000e+00],
        [ -7.14285714e-02,   7.71428571e-01,   7.14285714e-01,   2.85714286e-01],
        [ -2.06349206e-01,   4.28571429e-01,   8.41269841e-01,   4.76190476e-02],
        [ -3.65079365e-02,   5.14285714e-01,   5.87301587e-01,   5.23809524e-01],
        [ -5.52380952e-01,   1.85714286e-01,   1.90476190e-01,   1.42857143e-01],
        [ -9.28571429e-01,   6.28571429e-01,   2.85714286e-01,   7.14285714e-01],
        [ -8.68253968e-01,   4.57142857e-01,   7.93650794e-01,   7.61904762e-01],
        [ -4.69841270e-01,   7.14285714e-01,   2.53968254e-01,   5.23809524e-01],
        [ -4.11111111e-01,   2.00000000e-01,   2.22222222e-01,   3.33333333e-01],
        [ -4.12698413e-02,   8.57142857e-02,   9.68253968e-01,   8.09523810e-01],
        [ -6.34920635e-02,   2.85714286e-01,   4.12698413e-01,   4.76190476e-01],
        [ -5.38095238e-01,   5.71428571e-01,   4.76190476e-02,   2.85714286e-01],
        [ -5.38095238e-01,   5.71428571e-01,   4.76190476e-02,   2.85714286e-01],
        [ -6.01587302e-01,   5.71428571e-02,   4.60317460e-01,   7.61904762e-01],
        [ -5.38095238e-01,   5.71428571e-01,   4.76190476e-02,   2.85714286e-01],
        [ -4.58730159e-01,   9.14285714e-01,   3.17460317e-02,   1.90476190e-01],
        [ -9.17460317e-01,   3.28571429e-01,   6.34920635e-02,   3.80952381e-01],
        [ -7.93650794e-02,   6.57142857e-01,   1.58730159e-02,   9.52380952e-02],
        [ -4.33333333e-01,   3.99680289e-15,   6.66666667e-01,   1.11022302e-15],
        [ -1.39682540e-01,   6.28571429e-01,   5.07936508e-01,   4.76190476e-02],
        [ -1.64285714e+00,  -6.57142857e-01,  -5.71428571e-01,  -4.28571429e-01]])
    basic = np.array([ 4, 5, 6, 16, 8, 7, 1, 11, 10, 13, 14, 15, 9, 17, 3, 18,
                   20, 12, 22, 19, 24, 25, 23, 27, 28, 29, 30, 31, 32, 33,
                   34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                   48, 49, 50, 51])
    non_basic = np.array([ 2, 26, 21])
    print(optimize(dictionary, basic, non_basic))
    print(simplex(dictionary, basic, non_basic))
    assert 0
