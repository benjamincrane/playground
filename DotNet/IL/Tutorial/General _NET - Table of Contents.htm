<HTML>
<HEAD>   
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">   
    <META NAME="Author" CONTENT="Brad Jones">  
    <TITLE>General .NET - Table of Contents</TITLE>   
    <META Name="description" Content="General information on .NET">
    <META Name="keywords" Content=".NET Microsoft Programming">

    <SCRIPT LANGUAGE="JavaScript">
<!--
var axel = Math.random() + "";
var ord = axel * 1000000000000000000 + "?";

//This part of script alleviates a Netscape document.write bug
<!-- 
NS4 = document.layers;
if (NS4) {
origWidth = innerWidth;
origHeight = innerHeight;
}
function reDo() {
if (innerWidth != origWidth || innerHeight != origHeight) 
location.reload();
}
if (NS4) onresize = reDo;
//-->
</SCRIPT>

</HEAD>



<!-- Although this says it is a CSHARP file, it is actually used for the .NET page of CodeGuru which includes C#, VB.NET, and .NET -->
<!-- begin logo and top banner ad table -->


<TABLE width=100% cellpadding="0" cellspacing="0">

<!-- REMOVED Earthweb Banner ----------------------------------
  <TR>
    <TD COLSPAN="3" VALIGN="TOP">
      <A HREF="http://www.earthweb.com" TARGET="_top">
        <IMG SRC="/images/eweb_banner.gif" BORDER="0" ALT="EarthWeb">
      </a>
    </TD>
  </TR>
------------------------------------------------------------ -->
  <TR>
    <TD COLSPAN="3" VALIGN="TOP" align="center">
<A HREF="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/55686307/house_ribbon/House_SES_NY_04_1ee/ses-spring04-ribbon.gif/63613338666533643430333732616430" target="_top"><IMG SRC="http://www.codeguru.com/RealMedia/ads/Creatives/House_SES_NY_04_1ee/ses-spring04-ribbon.gif"  ALT="The Event for Search Engine Marketing & Optimization"  BORDER="0"></A><img src="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/55686307/house_ribbon/House_SES_NY_04_1ee/ses-spring04-ribbon.gif/63613338666533643430333732616430?_RM_EMPTY_" Width="1" Height="1" Border="0">
    </TD>
  </TR>

<!-- BLJAds - took out a couple rows and changed following -->
  <TR align="center">
    <TD>
    <A HREF="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/508753176/468x60-1/Dice_Makeup_1b/jobs-468_new.gif/63613338666533643430333732616430" target="_top"><IMG SRC="http://www.codeguru.com/RealMedia/ads/Creatives/Dice_Makeup_1b/jobs-468_new.gif"  ALT=""  BORDER="0"></A><img src="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/508753176/468x60-1/Dice_Makeup_1b/jobs-468_new.gif/63613338666533643430333732616430?_RM_EMPTY_" Width="1" Height="1" Border="0">
    </TD>
  </TR>

</TABLE>

<!-- end logo and top banner ad table -->

<hr>

<TABLE cellpadding="0" cellspacing="0" border="0">    
<TR>    
     <TD VALIGN="TOP" bgcolor="#EFEFEF" Width="90">      

<!--search form -->
<table border=1 cellspacing=0 cellpadding=0>
<tr><td>
 
   <table border=0 cellpadding=5 cellspacing=0 width=150>
   <tr>
     <td align="center">
      <A HREF="/">
        <IMG SRC="/images/logo_cobrand.gif" BORDER="0" ALT="Developer.com">
      </a>
      </td>
   </tr>
   <tr>
     <td align="center">
     <table border=0 style='border: solid 1pt black; font-size: 8pt; font-family: Verdana, Arial, Helvetica' width=125 height=125 cellpadding=1 cellspacing=0>
<tr>
<td align=center bgcolor=#CC0000>	
<font color=white><B>Travel Ideas:</b></font>
</td>
</tr>
<tr>
<td valign=top align=center bgcolor=white>
&nbsp;<a href=http://wd-world.orlandofloridareservations.com/>Disney Vacations</a><BR>
&nbsp;<a href=http://www.hawaiifanatic.com/>Hawaii</a><BR>
&nbsp;<a href=http://www.neworleansfanatic.com/>New Orleans</a><BR>
&nbsp;<a href=http://www.orlandofanatic.com/>Orlando</a><BR>
&nbsp;<a href=http://www.springbreakrooms.com/>Spring Break</a><BR>
&nbsp;<a href=http://www.wdwfanatic.com/>Disney World</a><BR>
&nbsp;<a href=http://www.halfpriceorlando.com/>Disney Tickets</a><BR>
&nbsp;<a href=http://universalstudios.orlandofloridareservations.com/>Universal Studios</a><BR>
</td>
</tr>
</table><IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/837658436/125x125-1/Reservation_System_2b/AD_C.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1>

  </td></tr>
</table>

      
</td></tr>

<tr><td>
<!-- SEARCH FORM-->
  <table width=130 border=0 cellpadding=5 cellspacing=0>
    <tr>
      <td>
    <form method="post"
action="http://search.internet.com/codeguru.earthweb.com">
    <input type="hidden" name="IC_StartNumber" value="0">
    <input type="hidden" name="IC_BatchSize" value="10">
    <input type="hidden" name="IC_RelevanceThreshold" value="30">
    <input type="hidden"
name="IC_QueryDatabase"  value="codeguru.earthweb.com">
    <input type="text"   name="IC_QueryText" value="" size="10">
    <input type="submit" value="Search">
    </form>
<!-- END OF SEARCH FORM -->

</td>
    </tr>
  </table>

  <table border=0 cellpadding=5 cellspacing=0 width=150>
  <tr><td>
   <span class="navBarH1">CodeGuru Sites</span></td></tr>
   <tr><td nowrap>
    <small>
     <a href="/index.shtml">Visual C++ / MFC / C++</a><br>
     <a href="/csharp/index.shtml">.NET (C# and more)</a>
                          &nbsp;<!--<img src="/images/new.gif">--><br>
     <a href="/vb/index.shtml">Visual Basic</a><br>
     <a href="http://www.gamelan.com">Gamelan (Java)</a><br>
     <a href="http://www.jars.com">JARs (Java Applets)</a><br>
     <a  href="http://www.developer.com">Developer.com</a><br>
     <hr>
    </small>

    <a href="/SubmissionsGuidelines.html">
    <font face="verdana, helvetica" color="#000000" size=1>
       submission guidelines
    </font></a>
    <br>
    <hr>
</td></tr>

    <tr><td><span class="navBarH1">Interact</span></td></tr>
    <tr><td nowrap>
        <small>
          <a href="/cgi-bin/bbs/wt/wwwthreads.pl">Discussion Boards</a><br>
          <a href="http://e-newsletters.internet.com">Newsletters (subscribe)</a><br>
          <a href="/Guestbook/guestbook.shtml">Guestbook</a><br>
          <a href="/cgi-bin/recommend.cgi">Recommend Us!</a><br>
          <hr>
        </small>
    </td></tr>


    <tr><td><span class="navBarH1">Of Interest</span></td></tr>
    <tr><td nowrap>
        <small>
       <a href="/bookList/index.shtml">Book List</a>&nbsp;<img src="/images/new.gif"><br>
       <a href="/bookReviews/index.shtml">Book Reviews</a><br>
       <a href="/newsletters/index.shtml">Newsletters (archived)</a><br> 
       <a href="/about.shtml">About Us</a><br>
       <a href="/authorlist/index.html">Authors</a><!--&nbsp;<img src="/images/new.gif">--><br>
          <hr>
        </small>
    </td></tr>


    <tr><td><span class="navBarH1">Article Sections</span></td></tr>

    <tr><td>
      <span class="navBarH2">C#</span>
      <br>
      <small>
        <a href="/cs_syntax/index.shtml">basic syntax</a><br>
        <a href="/cs_collections/index.shtml">collections</a><br>
        <a href="/cs_controls/index.shtml">controls</a><br>
        <a href="/cs_data/index.shtml">data &amp; I/O</a><br>
        <a href="/cs_date_time/index.shtml">date &amp; time</a><br>
        <a href="/cs_delegates/index.shtml">delegates</a><br>
        <a href="/cs_graphics/index.shtml">graphics &amp; mmedia</a><br>
        <a href="/cs_internet/index.shtml">internet</a><br>
        <a href="/cs_misc/index.shtml">miscellaneous</a><br>
        <a href="/cs_network/index.shtml">network &amp; systems</a><br>
        <a href="/cs_webservices/index.shtml">Web services</a><br>
      </small>
      <br><!-- extra spacing added -->
      <span class="navBarH2">.NET</span>
      <br>
      <small>
        <a href="/net_data/index.shtml">data &amp; databases</a><br>
        <a href="/net_debugging/index.shtml">debugging</a><br>
        <a href="/net_framework/index.shtml">framework</a><br>
        <a href="/net_general/index.shtml">general</a><br>
        <a href="/jscript/index.shtml">JScript .NET</a><br>
        <a href="/cpp_managed/index.shtml">managed C++</a><br>
        <a href="/net_security/index.shtml">security</a><br>
        <a href="/net_vs_addins/index.shtml">VS Add-ins</a><br>
      </small>
      <br><!-- extra spacing added -->

            <span class="navBarH2">ASP.NET</span>
      <br>
      <small>
        <a href="/net_asp/index.shtml">general ASP.NET</a>&nbsp;&nbsp;<!--<img src="/images/new.gif">--><br>
      </small>
      <br><!-- extra spacing added -->

      <span class="navBarH2">VB .NET</span>
      <br>
      <small>
        <a href="/vbnet_controls/index.shtml">controls</a><br>
      </small>
      <br><!-- extra spacing added -->

      <span class="navBarH2">Mobile/Wireless</span>
      <br>
      <small>
        <a href="/mobile/index.shtml">mobile/wireless</a>&nbsp;<img src="/images/new.gif"><br>
      </small>
      <br><!-- extra spacing added -->


      <hr>

  </td></tr>

  </table>

<!-- JOB BUTTON --> 
    <table border=0 cellpadding=5 cellspacing=0 width=150>
    <tr><td align="center">
       <a href="http://jobs.internet.com" target="new">
         <IMG SRC="http://www.codeguru.com/jobs.gif" alt="[Internet Jobs]">
       </a>
    </td></tr>
    </table>

  </td>
</tr>

<!-- Commerce bar stuff added temporarily -->
<tr>
<td>
<br>
<table align="center" border="0" cellpadding="3" width="148">
<tr bgcolor="black"><td>
<font face="Arial" color="white" size="1" >
<b><center>internet.commerce</center></b></font></td></tr>


<tr bgcolor="lightgrey"><td>
<font face="Arial" size="1" >
<a href="http://www.internet.com/partners/">Partners &amp; Affiliates</A><BR>
<a href="http://www.gifttree.com">Corporate Gifts</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/86377542/cp1/GiftTree_2d/CorporateGifts.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1 BORDER=0>
<BR>
<a href="http://www.business.com/internet/search.asp">Business Search</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/1489488445/cp2/Business_com_21e/BusinessSearch.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1 BORDER=0><BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/1813980125/cp3/INB_29a/SendaPressRelease.html/63613338666533643430333732616430" target=new>Send a Press Release</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/1813980125/cp3/INB_29a/SendaPressRelease.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1>
<BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/1062959276/cp4/DealTime_22k/ReferenceLibrary.html/63613338666533643430333732616430">Reference
Library</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/1062959276/cp4/DealTime_22k/ReferenceLibrary.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1 BORDER=0>



<BR>
<a href="http://www.business.com/internet/search.asp">Business Search</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/1384486843/cp5/Business_com_21c/BusinessSearch.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1 BORDER=0><BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/645949171/cp6/Tradepub.com_31d/TechMagazinesFREE.html/63613338666533643430333732616430" target=new>Tech Magazines - FREE</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/645949171/cp6/Tradepub.com_31d/TechMagazinesFREE.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1><BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/969390394/cp7/ProSavvy_33c/FindaConsultant.html/63613338666533643430333732616430" target=new>Find a Consultant</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/969390394/cp7/ProSavvy_33c/FindaConsultant.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1><BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/230096375/cp8/Top_Hosts_32c/search.html/63613338666533643430333732616430">Search Web Hosting</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/230096375/cp8/Top_Hosts_32c/search.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1 BORDER=0>


<BR>
<a href="http://www.cute-flower-shop.com">Flower Delivery</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/539570766/cp9/Cute_Flower_Shopcom_CP_1a/FlowerDelivery.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1 BORDER=0><BR>
<a href="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/1941748117/cp10/Strategic_3c/SearchOptimization.html/63613338666533643430333732616430">Search Optimization</a>
<IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/1941748117/cp10/Strategic_3c/SearchOptimization.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1 BORDER=0>



<BR>

</font>
</td></tr>
</table>
<br>
</td>
</tr>
<!-- End of Commerce bar stuff -->

<tr><td>
<p>
<SCRIPT LANGUAGE="javascript"> 
function SetFormAction() {
 newLocation = "http://hardwarecentral.dealtime.com/xKW-" + document.frmGSRequest.keyword.value + "/NS-1/linkin_id-3011678/GS.html";
 document.location.href = newLocation;
 return;
}
</script>


<link rel=stylesheet type="text/css" href="/icom_includes/special/dealtime/style.css">
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="2" BGCOLOR="#000000" width="125">
 <TR>
  <TD>
   <table cellpadding="2" cellspacing="0" border="0" width="125" bgcolor="#FFFFCC">
	<tr>
	 <td align="center" width="125"><img src="/icom_includes/special/dealtime/hc_logo.gif" alt="" border="0">
	 <br><font class="normal" color="#4D4D4D"><b>Compare products, prices, and stores at Hardware Central!</b></font></td>
	</tr>
	<tr>
	 <td align="center" class="norm" width="125"><br>		
	 <B><A HREF="http://hardwarecentral.dealtime.com/BannerIn/1,2844,,00.html?linkin_id=3011654&nFormId=38733-72-1&path=%2FPages%2FCategoryV2">Computers</a></b>
	 <BR>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-Desktops~linkin_id-3011655">Desktops</a>, 
	 <br>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-Notebooks_Mac~linkin_id-3011656">Mac</a> & <A HREF="http://hardwarecentral.dealtime.com/xPP-PC_Notebooks~linkin_id-3011657">PC Notebooks</a>,
	 <br>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-Monitors~linkin_id-3011658">Monitors</a>, <A HREF="http://hardwarecentral.dealtime.com/xPP-Scanners~linkin_id-3011659">Scanners</a>,
	 <br>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-Web_Cameras~linkin_id-3011660">Webcams</a>, <A HREF="http://hardwarecentral.dealtime.com/xPP-Personal_Organizers~linkin_id-3011661">PDA's</a>,
	 <br><A HREF="http://hardwarecentral.dealtime.com/BannerIn/1,2844,,00.html?linkin_id=3011662&nFormId=38733-72-1&path=%2FPages%2FCategoryV2">more</a>...<BR>
	 <BR>
	 <B><A HREF="http://hardwarecentral.dealtime.com/BannerIn/1,2844,,00.html?linkin_id=3011663&nFormId=38863-368-1&path=%2FPages%2FCategoryV2C">Software</a></b><BR>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-Creativity_Applications~linkin_id-3011664">Creativity Applications</a>,
	 <br><A HREF="http://hardwarecentral.dealtime.com/xPP-Programming_Tools~linkin_id-3011665">Programming Tools</a>,
	 <br>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-Internet_and_Communication_Applications~linkin_id-3011666">Internet</a>
	 <br>
	 & <A HREF="http://hardwarecentral.dealtime.com/xPP-Internet_and_Communication_Applications~linkin_id-3011666">Communication Applications</a>,
	 <br>
	 <A HREF="http://hardwarecentral.dealtime.com/BannerIn/1,2844,,00.html?linkin_id=3011667&nFormId=38863-368-1&path=%2FPages%2FCategoryV2C">more</a>...<BR>
	 <BR>
	 <B><A HREF="http://hardwarecentral.dealtime.com/BannerIn/1,2844,,00.html?linkin_id=3011668&nFormId=38732-3-1&path=%2FPages%2FCategoryV2">Electronics</a></b>
	 <BR>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-Digital_Cameras~linkin_id-3011669">Digital Cameras</a> 
	 <br> & <A HREF="http://hardwarecentral.dealtime.com/xCP-Digital_Camera_Accessories~FD-87204~linkin_id-3011670">Accessories</a>,
	 <br>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-GPS_devices~linkin_id-3011671">GPS devices</a>
	 <br> & <A HREF="http://hardwarecentral.dealtime.com/xCP-GPS_Accessories~FD-93207~linkin_id-3011672">Accessories</a>,
	 <br>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-Camcorders~linkin_id-3011673">Camcorders</a>,
	 <br>
	 <A HREF="http://hardwarecentral.dealtime.com/xPP-MP3_-Digital_Audio_Players~linkin_id-3011674">MP3 Players</a> & <A HREF="http://hardwarecentral.dealtime.com/xCP-MP3_Accessories~FD-87208~linkin_id-3011675">Accessories</a>,
	 <br>
	 <A HREF="http://hardwarecentral.dealtime.com/BannerIn/1,2844,,00.html?linkin_id=3011676&nFormId=38732-3-1&path=%2FPages%2FCategoryV2">more</a>...
	 <p>
	</td>
   </tr>
   <tr><form name="frmGSRequest" method="get" onsubmit="javascript:SetFormAction();return false;">
	<td align="center" valign="top" class="normal" width="125">Get the best price on <A HREF="http://hardwarecentral.dealtime.com/xKW-microsoft_visual_studio_net_professional/FN-Programming_Tools/DL-0/NS-1/linkin_id-3011677/GS.html">Microsoft Visual Studio .NET</a> Professional Edition or search for other development tools
	<br>
	<br>
	<input type="text" name="keyword"  size="9"><br><br>
	<input value="Search" type="image" src="/icom_includes/special/dealtime/search.gif" BORDER="0"><br><br>
	</td>
   </tr>
   </form>
   </table>
  </td>
 </tr>
</table>

</td></tr>

</table>

<!--/navbar> -->
    


     </td>

     <td valign="top" width="20"> &nbsp;&nbsp;&nbsp; 
         <!-- blank column for spacing -->    
     </td>    

     <TD VALIGN="TOP">       <!-- begin content column -->  


<script type="text/javascript" language="javascript"> 
if (screen.width==640 || screen.width==800)
{
   document.write("<link rel=stylesheet href='/global/global800.css'>"); 
} 
else 
{ 
   document.write("<link rel=stylesheet href='/global/global.css'>"); 
} 
</script>


<CENTER><H3><FONT COLOR="#AOAO99">
MSIL Tutorial
</FONT></H3></CENTER><HR>

<!-- Author and contact details -->
This article was contributed by 
<A HREF="mailto:alexm@cmt.co.il">Alex Farber</A>.

<!-- For which environment is this code specific??? -->
<p><u>Environment:</u> Visual Studio .NET

<h2>Introduction</h3>

<p>Microsoft Intermediate Language (MSIL) is a language used as the output of a number of compilers (C#, VB, .NET, and so forth). <b>The ILDasm</b> (Intermediate Language Disassembler) program that ships with the .NET Framework SDK (FrameworkSDK\Bin\ildasm.exe) allows the user to see MSIL code in human-readable format. By using this utility, we can open any .NET executable file (exe or dll) and see MSIL code.</p>

<p>The <b>ILAsm</b> program (Intermediate Language Assembler) generates an executable file from the MSIL language. We can find this program in the WINNT\Microsoft.NET\Framework\vn.nn.nn directory.</p>

<p>Any Visual C++ programmer starting with .NET development is interested in what happens in the low level of the .NET Framework. Learning MSIL gives a user the chance to understand some things that are hidden from a programmer working with C# or VB.NET. Knowing MSIL gives more power to a .NET programmer. We never need to write programs in MSIL directly, but in some difficult cases it is very useful to open the MSIL code in ILDasm and see how things are done.</p>

<p>A MSIL reference in doc format is available to a .NET developer and may be found in the Framework SDK directory:</p>

<ul>
<li>FrameworkSDK\Tool Developers Guide\docs\Partition II Metadata.doc <b>(Metadata Definition and Semantics)</b>. In this file, I found a description of all MSIL directives such as <b>.entrypoint</b>, <b>.locals</b>, and so on.</li>
<li>FrameworkSDK\Tool Developers Guide\docs\Partition III CIL.doc <b>(CIL Instruction Set)</b> contains a full list of the MSIL commands.</li>
</ul>

<p>I also used in my work in an ILDAsm tutorial from MSDN and an excellent article in the May 2001 issue of MSDN Magazine: <B>ILDASM is Your New Best Friend</B> by <b>John Robbins</b>.</p>

<p>I think the best way to learn the language is to write some programs in it. This is a reason I decided to make several small MSIL programs. Actually, I didn't write this code&mdash;the C# compiler generated it. I made some minor changes and added a lot of notes describing how MSIL is working.</p>

<p>Reading the sample projects attached to this article may help a .NET programmer understand Intermediate Language and easily read MSIL code when this is necessary.</p>

<h3>General Information</h3>

<p>All operations in MSIL are executed on the stack. When a function is called, its parameters and local variables are allocated on the stack. Function code starting from this stack state may push some values onto the stack, make operations with these values, and pop values from the stack.</p>

<p>Execution of both MSIL commands and functions is done in three steps:</p>

<ol>
<li>Push command operands or function parameters onto the stack;</li>
<li>Execute the MSIL command or call function. The command or function pops their operands (parameters) from the stack and pushes onto the stack result (return value);</li>
<li>Read result from the stack.</li>
</ol>

<p>Steps 1 and 3 are optional. For example, the <b>void</b> function doesn't push a return value to the stack.</p>

<p>The stack contains objects of value types and references to objects of reference type. Reference type objects are kept in the heap.</p>

<p>MSIL commands used to push values onto the stack are called <b>ld...</b> (load). Commands used to pop values from the stack are called <b>st...</b> (store), because values are stored in variables. Therefore, we will call the <b>push</b> operation <b>loading</b> and the <b>pop</b> operation <b>storing</b>.</p>

<h3>Sample Projects</h3>

<p>The code attached to this article contains a number of Console Applications written in MSIL. To build them, ensure that the <b>ILAsm</b> program is available through the PATH. Each project is done as a Visual Studio solution. The source IL file may be opened in the VS Text Editor. The build command runs the <b>ILAsm</b> program, which generates an exe file in the project directory. The run command executes this file. At the end of each program, I added these lines, which can be written in C#:

<PRE>
    Console.WriteLine("Press Enter to continue");
    Console::Read();
</PRE>

<p>This is done to see the program output when it is run from Windows Explorer.</p>

<p>Here's a list of the included projects:</p>

<ol>
<li><A href="#PrintString">PrintString</A>&mdash;prints the string to the console.</li>
<li><A href="#XequalN">XequalN</A>&mdash;assigns a value to the int variable and prints it to the console.</li>
<li><A href="#Operations">Operations</A>&mdash;reads two numbers from the console; makes operations +, -, and *; and shows the result.</li>
<li><A href="#Array1">Array1</A>&mdash;allocates int array, assign values to its elements; print elements and array length.</li>
<li><A href="#Compare">Compare</A>&mdash;enters two numbers and prints the minimum.</li>
<li><A href="#Array2">Array2</A>&mdash;fills array elements in loop and prints some elements.</li>
<li><A href="#Unsafe">Unsafe</A>&mdash;uses unsafe pointers to access array elements.</li>
<li><A href="#PInvoke">PInvoke</A>&mdash;calls Win32 API.</li>
<li><A href="#Classes">Classes</A>&mdash;works with classes.</li>
<li><A href="#Exception">Exception</A>&mdash;handles exceptions.</li>
</ol>

<p>I suggest that you read these projects in the same order as they are described here. In the projects' descriptions given below, I explain each new MSIL command used in the program and show some code fragments.</p>

<a name="PrintString"></a><h3>PrintString Program</h3>

<p>PrintString is the MSIL <b>Hello, World </b> application.</p>

<p>MSIL directives used in the code are as follows:</p>

<p><b>.entrypoint</b>&mdash;defines the application entry point (the function called by .NET Runtime when the program starts).<br>
<b>.maxstack</b>&mdash;defines the maximum stack depth used by the function code. The C# compiler sets always the exact value for each function. In the sample project, I set this value to 8.</p>

<p>MSIL commands are as follows:</p>

<p><b>ldstr</b> <i>string</i>&mdash;loads the string constant onto the stack.<br>
<b>call</b> <i>function(parameters)</i>&mdash;calls the static function. Parameters for the function should be loaded onto the stack before this call.<br>
<b>pop</b>&mdash;pops a value from the stack. Used when we don't need to store a value in the variable.<br>
<b>ret</b>&mdash;returns from a function.</p>

<p>Calling the static function is simple. We push to stack the function parameters, call the function, and read from the stack function return value (if function is not <b>void</b>). <b>Console.WriteLine</b> is an example of such a function.</p>

<p>Here is the code:</p>

<PRE>
.assembly PrintString {}

<span class="codeComment">/*
    Console.WriteLine("Hello, World)"
*/</span>

.method static public void main() il managed
{
    .entrypoint             <span class="codeComment">// this function is the application
                            // entry point</span>

    .maxstack 8


    <span class="codeComment">// *****************************************************
    // Console.WriteLine("Hello, World)";
    // *****************************************************</span>
    ldstr "Hello, World"        <span class="codeComment">// load string onto stack</span>

    <span class="codeComment">// Call static System.Console.Writeline function
    // (function pops string from the stack)</span>
    call   void [mscorlib]System.Console::WriteLine
                                 (class System.String)


    <span class="codeComment">// *****************************************************</span>
    ldstr "Press Enter to continue"
    call   void [mscorlib]System.Console::WriteLine
                                 (class System.String)


    <span class="codeComment">// Call the System.Console.Read function</span>
    call int32 [mscorlib]System.Console::Read()

    <span class="codeComment">// The pop instruction removes the top element from the stack.
    // (remove number returned by Read() function)</span>
    pop
    <span class="codeComment">// *****************************************************</span>

    ret
}
</PRE>

<a name="XequalN"></a><h3>XequalN Program</h3>

<p>The program assigns a value to the integer variable and prints it to the console window.</p>

<p>Commands:</p>

<p><b>ldc.i4.</b><i>n</i>&mdash;loads a 32-bit constant (n from 0 to 8) onto the stack<br>
<b>stloc.</b><i>n</i>&mdash;stores a value from the stack to local variable number n (n from 0 to 3)</p>

<p>Code:</p>

<PRE>
.assembly XequalN {}

<span class="codeComment">// int x;
// x = 7;
// Console.WriteLine(x);</span>

.method static public void main() il managed
{
    .entrypoint

    .maxstack 8

    .locals init ([0] int32 x)  <span class="codeComment">// Allocate local variable

    // *****************************************************
    // x = 7;
    // *****************************************************</span>
    ldc.i4.7                    <span class="codeComment">// load constant onto stack</span>
    stloc.0                     <span class="codeComment">// store value from stack to
                                // var. 0</span>
    
    <span class="codeComment">// *****************************************************
    // Console.WriteLine(x);
    // *****************************************************</span>
    ldloc.0                     <span class="codeComment">// load var.0 onto stack</span>
    call void [mscorlib]System.Console::WriteLine(int32)

    ret
}

</PRE>

<a name="Operations"></a><h3>Operations Program</h3>

<p>The program reads two numbers from the console, makes simple math operations with them, and shows the result.</p>

<p>Commands:</p>

<p><b>add</b>&mdash;adds two values. Command parameters should be loaded onto the stack before the call. The function pops the parameters and pushes a result onto the stack.<br>
<b>sub</b>&mdash;subtracts two values.<br>
<b>mul</b>&mdash;multiplies two values.</p>

<p>Code fragments:</p>

<PRE>
.assembly Operations {}
<span class="codeComment">/*
<span class="codeComment">// This program works as C# code:</span>

            int x, y, z;
            string s;

            Console.WriteLine("Enter x:");
            s = Console.ReadLine();
            x = Int32.Parse(s);

            Console.WriteLine("Enter y:");
            s = Console.ReadLine();
            y = Int32.Parse(s);

            z = x + y;
            Console.Write("x + y = ");
            Console.Write(z);
            Console.WriteLine("");

            z = x - y;
            Console.Write("x - y = ");
            Console.Write(z);
            Console.WriteLine("");

            z = x * y;
            Console.Write("x * y = ");
            Console.Write(z);
            Console.WriteLine("");
*/</span>

.method static public void main() il managed
{
    .entrypoint
    .maxstack 8

    .locals init ([0] int32 x,
           [1] int32 y,
           [2] int32 z,
           [3] string s)

    <span class="codeComment">// *****************************************************
    // Console.WriteLine("Enter x:");
    // *****************************************************</span>
    ldstr      "Enter x:"       <span class="codeComment">// load string onto stack</span>
    call       void [mscorlib]System.Console::WriteLine(string)

    <span class="codeComment">// *****************************************************
    // s = Console.ReadLine();
    // *****************************************************</span>
    call       string [mscorlib]System.Console::ReadLine()
    stloc.3                     <span class="codeComment">// store value to var. 3

    // *****************************************************
    // x = Int32.Parse(s);
    // *****************************************************</span>
    ldloc.3                     <span class="codeComment">// load variable 3 onto stack

    // Call System.Int32::Parse(string)
    // Function pops string from stack and pushes to stack
    // int32 value - result of parsing.</span>
    call       int32 [mscorlib]System.Int32::Parse(string)

    stloc.0                     <span class="codeComment">// store value to var. 0



    // *****************************************************
    // Same operations with variable y
    // *****************************************************</span>
    ldstr      "Enter y:"
               <span class="codeComment">// load string</span>
    call       void [mscorlib]System.Console::WriteLine(string)
               <span class="codeComment">// call</span>
    call       string [mscorlib]System.Console::ReadLine()
               <span class="codeComment">// call</span>
    stloc.3
              <span class="codeComment">// store to var. 3</span>
    ldloc.3
              <span class="codeComment">// load var. 3</span>
    call       int32 [mscorlib]System.Int32::Parse(string)
              <span class="codeComment">// call</span>
    stloc.1
              <span class="codeComment">// store to var. 1</span>

    <span class="codeComment">// *****************************************************
    // z = x + y;
    // *****************************************************</span>
    ldloc.0             <span class="codeComment">// load variable 0 onto stack</span>
    ldloc.1             <span class="codeComment">// load variable 1 onto stack</span>

    <span class="codeComment">// pop two values from the stack, add them and push result
    // onto stack</span>
    add

    stloc.2             <span class="codeComment">// store to variable 2

    // *****************************************************
    // Console.Write("x + y = ");
    // *****************************************************</span>
    ldstr      "x + y = "           <span class="codeComment">// load string onto stack</span>
    call       void [mscorlib]System.Console::Write(string)

    <span class="codeComment">// *****************************************************
    // Console.Write(z);
    // *****************************************************</span>
    ldloc.2                         <span class="codeComment">// load variable 2 onto stack</span>
    call       void [mscorlib]System.Console::Write(int32)

    <span class="codeComment">// *****************************************************
    // Console.WriteLine("");
    // *****************************************************</span>
    ldstr      ""                   <span class="codeComment">// load string onto stack</span>
    call       void [mscorlib]System.Console::WriteLine(string)

    <span class="codeComment">// Same operations with subtraction and multiplication ...</span>

    ret
}
</PRE>

<a name="Array1"></a><h3>Array1 Program</h3>

<p>The program allocates the int array, assigns values to its elements, and then prints the elements and array length.</p>

<p>Commands:</p>

<p><b>newarr</b> <i>type</i>&mdash;creates an array of <i>type</i> elements. The array size should be loaded onto the stack before a call to this command. Loads onto the stack a reference to the array.<br>
<b>stelem.i4</b>&mdash;assigns a value to an array member. The value has type Int32. The array reference, index, and value should be loaded onto the stack before a call to this command.<br>
<b>ldelema</b> <i>type</i>&mdash;loads to the stack the address of an array element. The array reference and index should be loaded onto the stack before a call to this command. The address is used to call a non-static class function (see later).<br>
<b>ldlen</b>&mdash;loads the length of an array onto the stack. The array reference should be loaded onto the stack before a call to this command.<br>
<b>ldloca.s</b> <i>variable</i>&mdash;loads the address of the variable onto the stack.<br>
<b>ldc.i4.s</b> <i>value</i>&mdash;loads an Int32 constant onto the stack (used for values more than 8).<br>
<b>conv.i4</b>&mdash;converts value from the stack to Int32.<br>
<b>call instance</b> <i>function(arguments)</i>&mdash;calls a non-static class function. Before a call to a non-static function, we need to load onto the stack the address of the class object (used first as a hidden parameter, as in C++) and function arguments. In this sample object, the address is loaded using the <b>ldelema</b> and <b>ldloca</b> commands.</p>

<p>In some code fragments in this sample, I wrote in the notes to stack the state starting after the last local variable. In this sample, we see the variable generated by the compiler. This variable is used to make the call to the non-static class function.</p>

<p>Code:</p>

<PRE>
.assembly Array1 {}

<span class="codeComment">/*
// This program works as C# code:

int[] x = new int[5];
x[0] = 10;
x[1] = 20;

Console.WriteLine("x[0] = " + x[0].ToString());
Console.WriteLine("x[1] = " + x[1].ToString());

Console.WriteLine("Array length = " + x.Length.ToString());

*/</span>

.method static public void main() il managed
{
    .entrypoint
    .maxstack 8

    .locals init ([0] int32[] x,
                  [1] int32 tmp)    <span class="codeComment">// generated by compiler


    // *****************************************************
    // x = new int[5];
    // *****************************************************</span>
    ldc.i4.5                        <span class="codeComment">// load constant onto stack</span>

    <span class="codeComment">// create array and store reference onto stack</span>
    newarr     [mscorlib]System.Int32

    <span class="codeComment">// Store (pop) value from the stack and place it to local
    // variable 0.</span>
    stloc.0

    <span class="codeComment">// *****************************************************
    // x[0] = 10;
    // *****************************************************</span>
    ldloc.0           <span class="codeComment">// Load local variable 0 onto stack (array)</span>
    ldc.i4.0          <span class="codeComment">// Load constant 0 to the stack     (index)</span>
    ldc.i4.s   10     <span class="codeComment">// Load constant 10 to the stack    (value)</span>
    stelem.i4         <span class="codeComment">// array[index] = value


    // The same operations with element number 1...


    // ***************************************************
    // Console.WriteLine("x[0] = " + x[0].ToString());
    // ***************************************************</span>
    ldstr      "x[0] = "            <span class="codeComment">// load string onto stack
                // STACK: "x[0] = "  (stack is shown from local
                // variables)</span>
    ldloc.0                         <span class="codeComment">// load variable 0 onto stack</span>
    ldc.i4.0                        <span class="codeComment">// load constant 0 onto stack
                // STACK: "x[0] = " -&gt; x -&gt; 0
    // Load address of array element onto stack.</span>
    ldelema    [mscorlib]System.Int32
                <span class="codeComment">// STACK: "x[0] = " -&gt; pointer to Int32 instance
                // 10
    // Call non-static function System.Int32::ToString().</span>
    call       instance string [mscorlib]System.Int32::ToString()
                <span class="codeComment">// STACK: "x[0] = " -&gt; "10"
    // call static System.String::Concat(string, string)</span>
    call       string [mscorlib]System.String::Concat
                                               (string, string)
                <span class="codeComment">// STACK: "x[0] = 10"
    // call static System.Console::WriteLine(string)</span>
    call       void [mscorlib]System.Console::WriteLine(string)
                <span class="codeComment">// STACK: empty


    // The same operations with element number 1 ...


    // *****************************************************
    // Console.WriteLine("Array length = " + x.Length.ToString());
    // *****************************************************</span>
    ldstr      "Array length = "
                <span class="codeComment">// load string onto stack
                // STACK: "Array length = "</span>
    ldloc.0
                <span class="codeComment">// load variable 0 to stack
                // STACK: "Array length = " -&gt; x</span>
    ldlen
                <span class="codeComment">// push the length of array onto stack
                // STACK: "Array length = " -&gt; 5</span>
    conv.i4
                <span class="codeComment">// Convert to int32, pushing int32 onto stack
                // STACK: "Array length = " -&gt; 5</span>
    stloc.1
                <span class="codeComment">// store to local variable 1 (tmp)
                // STACK: "Array length = "</span>
    ldloca.s   tmp
                <span class="codeComment">// load address of variable tmp onto stack
                // STACK: "Array length = " -&gt; &amp;tmp</span>
    call       instance string [mscorlib]System.Int32::ToString()
                <span class="codeComment">// STACK: "Array length = " -&gt; "5"</span>
    call       string [mscorlib]System.String::Concat
                                       (string, string)
                <span class="codeComment">// STACK: "Array length = 5"</span>
    call       void [mscorlib]System.Console::WriteLine(string)
                <span class="codeComment">// STACK: empty</span>

    ret
}
</PRE>

<a name="Compare"></a><h3>Compare Program</h3>

<p>The program reads two numbers and prints their minimum.</p>

<p>Commands:</p>

<p><b>bge.s</b> <i>label</i>&mdash;goes to <i>label</i> if value1 is greater than or equal to value 2. Values 1 and 2 should be loaded onto the stack before a call to this command.<br>
<b>br.s</b> <i>label</i>&mdash;goes to <i>label</i>.<br>
<b>box</b> <i>value type</i>&mdash;converts a <i>value type</i> to an Object and loads the Object's reference onto the stack.</p>

<p>Boxing in this program is caused by the C# line: <b>Console.WriteLine("{0:d}", z);</b><br>
Writing this line in this way: <b>Console.WriteLine(z.ToString());</b><br>
doesn't cause boxing.</p>

<p>Code:</p>

<PRE>
.assembly Compare {}
<span class="codeComment">/*
            int x, y, z;
            string s;

            Console.WriteLine("Enter x:");
            s = Console.ReadLine();
            x = Int32.Parse(s);

            Console.WriteLine("Enter y:");
            s = Console.ReadLine();
            y = Int32.Parse(s);

            if ( x &lt; y )
                z = x;
            else
                z = y;

            Console.WriteLine("{0:d}", z);
*/</span>

.method static public void main() il managed
{
    .entrypoint
    .maxstack 8
    
    .locals init ([0] int32 x,
                  [1] int32 y,
                  [2] int32 z,
                  [3] string s)

    <span class="codeComment">// *****************************************************
    // Console.WriteLine("Enter x:");
    // *****************************************************</span>
    ldstr      "Enter x:"               <span class="codeComment">// load string onto stack</span>
    call  void [mscorlib]System.Console::WriteLine(string)
    
    <span class="codeComment">// *****************************************************
    // s = Console.ReadLine();
    // *****************************************************</span>
    call       string [mscorlib]System.Console::ReadLine()
    stloc.3                             <span class="codeComment">// store to var. 3

    // *****************************************************
    // x = Int32.Parse(s);
    // *****************************************************</span>
    ldloc.3                             <span class="codeComment">// load var. 3 onto stack</span>
    call       int32 [mscorlib]System.Int32::Parse(string)
    stloc.0                             <span class="codeComment">// store to var. 0

    // The same operations for y ...

    // *****************************************************
    // branch
    // if ( x &gt;= y ) goto L_GR;
    // *****************************************************</span>
    ldloc.0                     <span class="codeComment">// load x onto stack (value 1)</span>
    ldloc.1                     <span class="codeComment">// load y onto stack (value 2)</span>
    bge.s  L_GR                 <span class="codeComment">// goto L_GR if value1 is greater</span>
                                <span class="codeComment">// than or equal to value2

    // *****************************************************
    // z = x
    // *****************************************************</span>
    ldloc.0                     <span class="codeComment">// load variable 0 onto stack</span>
    stloc.2                     <span class="codeComment">// store to variable 2</span>

    br.s       L_CONTINUE       <span class="codeComment">// goto L_CONTINUE</span>

L_GR:

    <span class="codeComment">// *****************************************************
    // z = y
    // *****************************************************</span>
    ldloc.1             <span class="codeComment">// load variable 1 onto stack</span>
    stloc.2             <span class="codeComment">// store to variable 2</span>

L_CONTINUE:

    <span class="codeComment">// *****************************************************
    // Console.WriteLine("{0:d}", z);
    // NOTE: this line causes boxing.
    // *****************************************************</span>
    ldstr      "{0:d}"  <span class="codeComment">// load string onto stack</span>
    ldloc.2             <span class="codeComment">// load variable 2 to stack (z)</span>
    box       [mscorlib]System.Int32   <span class="codeComment">// convert Int32 to Object</span>
    call  void [mscorlib]System.Console::WriteLine(string, object)

    ret
}
</PRE>

<a name="Array2"></a><h3>Array2 Program</h3>

<p>The program fills an array in the loop and prints its elements. This time, we add the static function <b>ShowNumber(int)</b>, which is called from <b>main</b>.</p>

<p>Commands:</p>

<p><b>blt.s</b> <i>label</i>&mdash;goes to <i>label</i> if value 1 is less than value 2. Values 1 and 2 should be loaded onto the stack before a call to this command.<br>
<b>ldelem.i4</b>&mdash;loads an array element onto the stack. A reference to the array and index should be loaded onto the stack before a call to this command.<br>
<b>ldarga.s</b> <i>argument</i>&mdash;loads the address of the function argument onto the stack.</p>

<p>We can see in this program that the <b>for</b> loop is implemented in MSIL using labels.</p>

<p>Code:</p>

<PRE>
.assembly Array2 {}
<span class="codeComment">/*

            int[] px = new int[100];
            int i;

            for ( i = 1; i &lt; 100; i++ )
            {
                px[i] = i + 1;
            }

            ShowNumber(px[5]);
            ShowNumber(px[10]);
            

        static void ShowNumber(int n)
        {
            Console.WriteLine(n.ToString());
        }
*/</span>

.method static public void main() il managed
{
    .entrypoint
    .maxstack 8

    .locals init ([0] int32[] px,
                  [1] int32 i)

    <span class="codeComment">// *****************************************************
    // x = new int[100]
    // *****************************************************</span>
    ldc.i4.s   100                      <span class="codeComment">// load constant onto
                                        // stack</span>
    newarr     [mscorlib]System.Int32   <span class="codeComment">// allocate Int32</span>
    stloc.0                             <span class="codeComment">// store to variable 0

    // *****************************************************
    // i = 1
    // *****************************************************</span>
    ldc.i4.1                    <span class="codeComment">// load constant onto stack</span>
    stloc.1                     <span class="codeComment">// store to variable 1</span>

    br.s       CHECK_COUNTER    <span class="codeComment">// goto CHECK_COUNTER</span>

START_LOOP:
    <span class="codeComment">// *****************************************************
    // px[i] = i + 1;
    // *****************************************************</span>
    ldloc.0                     <span class="codeComment">// load variable 0 to stack
                                // STACK: px</span>
    ldloc.1                     <span class="codeComment">// load variable 1 to stack
                                // STACK; px -&gt; i</span>
    ldloc.1                     <span class="codeComment">// load variable 1 to stack
                                // STACK: px -&gt; i -&gt; i</span>
    ldc.i4.1                    <span class="codeComment">// load constant to stack
                                // STACK: px -&gt; i -&gt; i -&gt; 1.</span>
    add                         <span class="codeComment">// add last two values
                                // STACK: px -&gt; i -&gt; i+1
                                //      (array,index,value)</span>
    stelem.i4                   <span class="codeComment">// store value to array element:
                                // array[index] = value
                                // STACK: empty
    // *****************************************************
    // i = i + 1
    // *****************************************************</span>
    ldloc.1                     <span class="codeComment">// load variable 1 onto stack</span>
    ldc.i4.1                    <span class="codeComment">// load constant onto stack</span>
    add                         <span class="codeComment">// add</span>
    stloc.1                     <span class="codeComment">// store to variable 1</span>

CHECK_COUNTER:
    <span class="codeComment">// *****************************************************
    // if i &lt; 100 goto start f loop
    // *****************************************************</span>
    ldloc.1                     <span class="codeComment">// load variable 1 onto stack</span>
    ldc.i4.s   100              <span class="codeComment">// load constant onto stack</span>
    blt.s      START_LOOP       <span class="codeComment">// if value1 &lt; value2 go to
                                // START_LOOP


    // *****************************************************
    // ShowNumber(px[5]
    // *****************************************************</span>
    ldloc.0                     <span class="codeComment">// load variable 0 onto stack
                                // (array)</span>
    ldc.i4.5                    <span class="codeComment">// load constant onto stack
                                // (index)</span>
    ldelem.i4                   <span class="codeComment">// load array element to stack</span>
    call       void ShowNumber(int32)   <span class="codeComment">// call ShowNumber

    // *****************************************************
    // ShowNumber(px[10]
    // *****************************************************</span>
    ldloc.0
    ldc.i4.s   10
    ldelem.i4
    call       void ShowNumber(int32)

    ret
}

.method static public void  ShowNumber(int32 n) il managed
{
  .maxstack  1
 
  ldarga.s   n          <span class="codeComment">// load to stack address of argument n</span>
  
  call       instance string [mscorlib]System.Int32::ToString()
  call       void [mscorlib]System.Console::WriteLine(string)
  
  ret
} 
</PRE>

<a name="Unsafe"></a><h3>Unsafe Program</h3>

<p>The program fills and prints the int array using an unsafe pointer.</p>

<p>In this program, we see the new, unsafe types: <b>int32*</b>, <b>int32&amp;</b>. The <b>pinned</b> keyword, used with a local variable, prevents GC from moving the object pointed to by the variable.</p>

<p>Commands:</p>

<p><b>dup</b>&mdash;duplicates the value on the stack.<br>
<b>stind.i4</b>&mdash;stores the value by address. The address and value should be loaded onto the stack before a call to this command.</p>

<p>Code:</p>

<PRE>
.assembly Unsafe {}
<span class="codeComment">/*
int[] nArray = new int[5];
int i;
int* pCurrent;

fixed ( int* pArray = nArray )
{
    pCurrent = pArray;

    for ( i = 0; i &lt; 5; i++ )
    {
        *pCurrent++ = i + 1;
    }
}

for ( i = 0; i &lt; 5; i++ )
{
    Console.WriteLine(nArray[i].ToString());
}

*/</span>

.method static public void main() il managed
{
    .entrypoint
    .maxstack 8

    .locals ([0] int32[] nArray,
             [1] int32 i,
             [2] int32* pCurrent,
             [3] int32&amp; pinned pArray)  <span class="codeComment">// GC doesn't move
                                        // pointed object

    // *****************************************************
    // nArray = new int[5];
    // *****************************************************</span>
    ldc.i4.5                            <span class="codeComment">// load constant 5 onto
                                        // stack</span>
    newarr     [mscorlib]System.Int32   <span class="codeComment">// create array Int32[5]</span>
    stloc.0                             <span class="codeComment">// store value from stack
                                        // to local var. o

    // *****************************************************
    // pArray = nArray    (pArray = &amp;nArray[0])
    // *****************************************************</span>
    ldloc.0
               <span class="codeComment">// load variable 0 onto stack (array)</span>
    ldc.i4.0
               <span class="codeComment">// load constant 0 onto stack (index)</span>
    ldelema    [mscorlib]System.Int32
               <span class="codeComment">// load address of array[index] to stack</span>
    stloc.3
               <span class="codeComment">// store value from stack to local var. 3

    // *****************************************************
    // pCurrent = pArray;
    // *****************************************************</span>
    ldloc.3                     <span class="codeComment">// load variable 3 onto stack</span>
    conv.i                      <span class="codeComment">// convert to native int</span>
    stloc.2                     <span class="codeComment">// store to variable 2

    // *****************************************************
    // i = 0
    // *****************************************************</span>
    ldc.i4.0                    <span class="codeComment">// load constant 0 onto stack</span>
    stloc.1                     <span class="codeComment">// store value to var. 1

    // *****************************************************
    // goto CHECK_COUNTER
    // *****************************************************</span>
    br.s       CHECK_COUNTER

START_LOOP:

    <span class="codeComment">// *****************************************************
    // *pCurrent++ = i + 1                            [STACK]
    // *****************************************************
    // 1) keep old pCurrent value on the stack and increment
    // pCurrent</span>
    ldloc.2
          <span class="codeComment">// load variable 2 onto stack     [pCurrent]</span>
    dup
          <span class="codeComment">// duplicate the top value of the stack
          //                                [pCurrent pCurrent]</span>
    ldc.i4.4
          <span class="codeComment">// load constant 4 onto stack     [pCurrent pCurrent 4]</span>
    add
          <span class="codeComment">// add                            [pCurrent pCurrent + 4]</span>
    stloc.2
          <span class="codeComment">// store from stack to variable 2 [pCurrent]

    // 2) write (i+1) by old pCurrent value kept on the stack</span>
    ldloc.1
          <span class="codeComment">// load variable 1 onto stack     [pCurrent i]</span>
    ldc.i4.1
          <span class="codeComment">// load constant 1 onto stack     [pCurrent i 1]</span>
    add   <span class="codeComment">// add                            [pCurrent i+1]
    //                                      address  value</span>
    stind.i4
          <span class="codeComment">// store value by address         [empty]

    // *****************************************************
    // i = i + 1
    // *****************************************************</span>
    ldloc.1             <span class="codeComment">// load variable 1 onto stack</span>
    ldc.i4.1            <span class="codeComment">// load constant 1 onto stack</span>
    add                 <span class="codeComment">// add</span>
    stloc.1             <span class="codeComment">// store to variable 1</span>

CHECK_COUNTER:

    <span class="codeComment">// *****************************************************
    // if (i &lt; 5) goto START_LOOP;
    // *****************************************************</span>
    ldloc.1                     <span class="codeComment">// load variable 1 onto stack</span>
    ldc.i4.5                    <span class="codeComment">// load constant 5 onto stack</span>
    blt.s      START_LOOP       <span class="codeComment">// goto if less

    // *****************************************************
    // pArray = 0               fixed block finished
    // *****************************************************</span>
    ldc.i4.0                    <span class="codeComment">// load constant 0 to stack</span>
    conv.u                      <span class="codeComment">// convert to native unsigned int,</span>
                                <span class="codeComment">// pushing native int on stack</span>
    stloc.3                     <span class="codeComment">// store in variable 3

    // print array elements to console...</span>

    ret
}
</PRE>

<a name="PInvoke"></a><h3>PInvoke Program</h3>

<p>The program shows the computer name using Win32 API GetComputerName and MessageBox. API declarations in MSIL look like this:</p>

<PRE>
.method public hidebysig static pinvokeimpl("kernel32.dll"
                                             autochar winapi)
        int32  GetComputerName(
               class [mscorlib]System.Text.StringBuilder
                                      marshal( lptstr) buffer,
               int32&amp; size) cil managed preservesig
{
}

.method public hidebysig static pinvokeimpl("User32.dll"
                                             autochar winapi)
        int32  MessageBox(native int hWnd,
                          string  marshal( lptstr) lpText,
                          string  marshal( lptstr) lpCaption,
                          int32 uType) cil managed preservesig
{
}
</PRE>

<p>They are called by the same rules as other any functions.</p>

<a name="Classes"></a><h3>Classes Program</h3>

<p>In previous programs, we called the class functions from the static function <b>main</b>. In this program, we will see how to write classes. The program contains two classes: Class1, with function main; and SampleClass, created in main.</p>

<p>Directive:</p>

<p><b>.field</b>&mdash;defines class member. Used with keywords public, private, static, and so forth.</p>

<p>Commands:</p>

<p><b>stsfld</b> <i>static field</i>&mdash;replaces the value of the static field with the value from the the stack.<br>
<b>ldfld</b> <i>field</i>&mdash;loads a non-static class field onto the stack. The address of the class instance should be loaded onto the stack before a call to this command.<br>
<b>ldarg.n</b>&mdash;loads argument number n onto the stack. In a non-static class function, argument 0 is a hidden argument and points to the <b>this</b> instance.<br>
<b>newobj</b> <i>constructor</i>&mdash;creates a new instance of a class using <i>constructor</i>. Constructor parameters should be loaded onto the stack before this call. A reference to the created instance is loaded onto the stack.<br>
<b>callvirt instance</b> <i>function</i>&mdash;calls a late-bound method on an object.</p>

<p>Code:</p>

<PRE>
.assembly Classes {}
<span class="codeComment">/*
    class SampleClass
    {
        private int m_n;
        private string m_s;

        public static int nStatic = 10;

        public SampleClass(int n, string s)
        {
            m_n = n;
            m_s = s;
        }

        public int Number
        {
            get
            {
                return m_n;
            }
        }

        public string String
        {
            get
            {
                return m_s;
            }
        }

    };

    class Class1
    {
        [STAThread]
        static void Main(string[] args)
        {
            SampleClass o = new SampleClass(1, "Sample");

            Console.WriteLine(SampleClass.nStatic.ToString());

            Console.WriteLine(o.Number.ToString());

            Console.WriteLine(o.String);
        }
    }
*/</span>


.class private auto ansi beforefieldinit SampleClass
       extends [mscorlib]System.Object
{
    .field private int32 m_n              <span class="codeComment">// private int m_n;</span>
    .field private string m_s             <span class="codeComment">// private string m_s;</span>
    .field public static int32 nStatic    <span class="codeComment">// public static int
                                          // nStatic;

    // private static constructor generated by compiler
    // (generated to initialize static class member)</span>
    .method private hidebysig specialname rtspecialname static
        void  .cctor() cil managed
    {
        .maxstack  8

        <span class="codeComment">// *************************************************
        // nStatic = 10
        // *************************************************</span>
        ldc.i4.s 10            <span class="codeComment">// load constant onto stack
        // The stsfld instruction replaces the value of a static
        // field with a value from the stack</span>
        stsfld     int32 SampleClass::nStatic

        ret
    }

    <span class="codeComment">// constructor
    // public SampleClass(int n, string s)
    //</span>
    .method public hidebysig specialname rtspecialname 
        instance void  .ctor(int32 n, string s) cil managed
    {
        .maxstack  8

        <span class="codeComment">// *************************************************
        // Call base class constructor
        // *************************************************</span>
        ldarg.0         <span class="codeComment">// Load argument 0 onto stack (hidden
                        // pointer to this)
        // call Object constructor</span>
        call       instance void [mscorlib]System.Object::.ctor()

        <span class="codeComment">// *************************************************
        // m_n = n
        // *************************************************</span>
        ldarg.0         <span class="codeComment">// Load argument 0 onto stack
                        // (hidden pointer to this)</span>
        ldarg.1         <span class="codeComment">// load argument 1 onto stack (n) 
        // store value n in field m_n in instance pointed
        // by this</span>
        stfld      int32 SampleClass::m_n

        <span class="codeComment">// *************************************************
        // m_s = s
        // *************************************************</span>
        ldarg.0         <span class="codeComment">// Load argument 0 onto stack
                        // (hidden pointer to this)</span>
        ldarg.2         <span class="codeComment">// load argument 1 onto stack (s)
        // store value s in field m_s in instance pointed
        // by this</span>
        stfld      string SampleClass::m_s

        ret
    }

    <span class="codeComment">// Number property</span>
    .property instance int32 Number()
    {
        <span class="codeComment">// call get_Number</span>
        .get instance int32 SampleClass::get_Number()
    }

    .method public hidebysig specialname instance int32
        get_Number() cil managed
    {
        .maxstack  8

        <span class="codeComment">// variable generated by compiler</span>
        .locals ([0] int32 tmp)

        <span class="codeComment">// *************************************************
        // return m_n;
        // *************************************************</span>
        ldarg.0
                  <span class="codeComment">// load argument 0 (this pointer)</span>
        ldfld      int32 SampleClass::m_n
                  <span class="codeComment">// load field of object pointed by stack value</span>
        stloc.0
                  <span class="codeComment">// store in variable 0</span>
        ldloc.0
                  <span class="codeComment">// load variable 0 onto stack (return value
                  // of function)</span>

        ret
    }

    <span class="codeComment">// String property</span>
    .property instance string String()
    {
        .get instance string SampleClass::get_String()
    }
    
    .method public hidebysig specialname instance string
            get_String() cil managed
    {
        .maxstack  8

        <span class="codeComment">// variable generated by compiler</span>
        .locals ([0] string tmp)

        ldarg.0
             <span class="codeComment">// load argument 0 (this pointer)</span>
        ldfld      string SampleClass::m_s
             <span class="codeComment">// load field of object pointed by stack value</span>
        stloc.0
             <span class="codeComment">// store in variable 0</span>
        ldloc.0
             <span class="codeComment">// load variable 0 onto stack (return value
             // of function)</span>
        ret
    }
}


.class private auto ansi beforefieldinit Class1
       extends [mscorlib]System.Object
{
    <span class="codeComment">// public default constructor</span>
    .method public hidebysig specialname rtspecialname 
        instance void  .ctor() cil managed
    {
        .maxstack  8

        <span class="codeComment">// *************************************************
        // Call base class constructor
        // *************************************************</span>
        ldarg.0
                          <span class="codeComment">// load this pointer</span>
        call       instance void [mscorlib]System.Object::.ctor()
                          <span class="codeComment">// call Object constructor</span>

        ret
    }

    <span class="codeComment">// Main function</span>
    .method private hidebysig static void  Main(string[] args)
            cil managed
    {
        <span class="codeComment">// this method is the entry point to the application</span>
        .entrypoint

        <span class="codeComment">// Custom attribute</span>
        .custom instance void [mscorlib]System.
                STAThreadAttribute::.ctor() = ( 01 00 00 00 )

        .maxstack  8

        .locals ([0] class SampleClass o,
                 [1] int32 tmp)          <span class="codeComment">// generated by compiler

        // *************************************************
        // o = new SampleClass(1, "Sample");
        // *************************************************</span>
        ldc.i4.1                        <span class="codeComment">// load constant 1 onto
                                        // stack</span>
        ldstr      "Sample"             <span class="codeComment">// load string constant
                                        // onto stack
        // create new object SampleClass passing 2 parameters
        // from stack.
        // Load reference to created object onto stack</span>
        newobj     instance void SampleClass::.ctor(int32, string)
        stloc.0                         <span class="codeComment">// store to variable 0

        // *************************************************
        // Access static class member
        // Console.WriteLine(SampleClass.nStatic.ToString());
        // *************************************************

        // Load the address of the static field on the stack</span>
        ldsflda    int32 SampleClass::nStatic
        <span class="codeComment">// call Int32::ToString for object from stack</span>
        call       instance string [mscorlib]System.Int32
                            ::ToString()
        <span class="codeComment">// call static WriteLine passing string from stack
        // as parameter</span>
        call       void [mscorlib]System.Console
                   ::WriteLine(string)

        <span class="codeComment">// *************************************************
        // Call non-static class function
        // Console.WriteLine(o.Number.ToString());
        // *************************************************</span>
        ldloc.0                 <span class="codeComment">// load variable 0
        // call function for object from stack</span>
        call   instance int32 SampleClass::get_Number()
        stloc.1                         <span class="codeComment">// store to variable 1</span>
        ldloca.s  tmp                   <span class="codeComment">// load address to stack</span>
        call       instance string [mscorlib]System.Int32
                            ::ToString()
        call       void [mscorlib]System.Console
                        ::WriteLine(string)

        <span class="codeComment">// *************************************************
        // Call non-static class member
        // Console.WriteLine(o.String);
        // *************************************************</span>
        ldloc.0
        callvirt   instance string SampleClass::get_String()
        call       void [mscorlib]System.Console
                        ::WriteLine(string)

        <span class="codeComment">// *************************************************</span>
        ldstr "Press Enter to continue"
        call   void [mscorlib]System.Console
                    ::WriteLine(class System.String)
        call int32 [mscorlib]System.Console::Read()
        pop
        <span class="codeComment">// *************************************************</span>

        ret
    }
}
</PRE>

<a name="Exception"></a><h3>Exception Program</h3>

<p>The program divides two numbers, catching a divide-by-zero exception. The try/catch block in MSIL looks like it does in C#.</p>

<p>Command:</p>

<p><b>leave.s</b> <i>label</i>&mdash;leaves a protected block such as try or catch.</p>

<p>Code:</p>

<PRE>
.assembly Exception {}

<span class="codeComment">/*
            int x, y, z;
            string s;

            Console.WriteLine("Enter x:");
            s = Console.ReadLine();
            x = Int32.Parse(s);

            Console.WriteLine("Enter y:");
            s = Console.ReadLine();
            y = Int32.Parse(s);

            try
            {
                z = x / y;

                Console.WriteLine(z.ToString());
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

*/</span>

.method static public void main() il managed
{
    .entrypoint
    .maxstack 8

    .locals ([0] int32 x,
             [1] int32 y,
             [2] int32 z,
             [3] string s,
             [4] class [mscorlib]System.Exception e)
             
    <span class="codeComment">// Enter x, y ...</span>

    .try
    {
        <span class="codeComment">// *************************************************
        // z = x / y;
        // *************************************************</span>
        ldloc.0                 <span class="codeComment">// load var. 0</span>
        ldloc.1                 <span class="codeComment">// load var. 1</span>
        div                     <span class="codeComment">// divide</span>
        stloc.2                 <span class="codeComment">// store in var. 2

        // *************************************************
        // Console.WriteLine(z.ToString());
        // *************************************************</span>
        ldloca.s   z            <span class="codeComment">// load address of z</span>
        call       instance string [mscorlib]System.Int32
                                   ::ToString()
        call       void [mscorlib]System.Console
                                   ::WriteLine(string)

        leave.s    END_TRY_CATCH        <span class="codeComment">// exit try block</span>
    }
    catch [mscorlib]System.Exception 
    {
        stloc.s    e        <span class="codeComment">// store exception thrown on
                            // the stack

        // *************************************************
        // Console.WriteLine(e.Message);
        // *************************************************</span>
        ldloc.s    e                <span class="codeComment">// load e</span>
        callvirt   instance string [mscorlib]System.Exception
                                   ::get_Message()
        call       void [mscorlib]System.Console
                                   ::WriteLine(string)
        leave.s    END_TRY_CATCH        <span class="codeComment">// exit catch block</span>
    }

    END_TRY_CATCH:

    ret
}
</PRE>

<h3>Downloads</h3>
<!-- demo and source files -->

<A HREF="MSILTut.zip">
Download source - 43 Kb</A>

<h3>History</h3>
Date Posted: December 2, 2002<BR>

<!-- Only use the following if the article is updated --> 
<!-- Date Last Updated:  [today's date in the format month day, year] -->

<!--comments-->
<h3>Comments:</h3><ul>
<!--startlist-->
<li><a href="/mfc/comments/48253.shtml">Good stuff!</a> - JTeeuwen (2003/01/23)

</ul>
<P>
<strong><a href="/cgi-bin/addpage/addpage.cgi?cfg=addcomment&action=Comment">
Add Comment</a></strong>
<P>

</td>

      <!--BLJAds - Added right side tower ad -->
<TD VALIGN="TOP">
<IFRAME SRC="http://ad.doubleclick.net/adi/N3263.Earthweb/B1275574.2;sz=160x600;ord=506384598?" WIDTH=162 HEIGHT=602 MARGINWIDTH=0 MARGINHEIGHT=0 HSPACE=0 VSPACE=0 FRAMEBORDER=0 SCROLLING=no BORDERCOLOR='#000000'>
<SCRIPT language='JavaScript1.1' SRC="http://ad.doubleclick.net/adj/N3263.Earthweb/B1275574.2;abr=!ie;sz=160x600;ord=506384598?">
</SCRIPT>
<NOSCRIPT>
<A HREF="http://ad.doubleclick.net/jump/N3263.Earthweb/B1275574.2;abr=!ie4;abr=!ie5;sz=160x600;ord=506384598?">
<IMG SRC="http://ad.doubleclick.net/ad/N3263.Earthweb/B1275574.2;abr=!ie4;abr=!ie5;sz=160x600;ord=506384598?" BORDER=0 WIDTH=160 HEIGHT=600 ALT="Click Here">Click Here</A>
</NOSCRIPT>
</IFRAME><IMG SRC="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/506384598/125x800/Microsoft_ITDM_1c/EarthWebRONDrivesACA160x600.html/63613338666533643430333732616430?_RM_EMPTY_" WIDTH=1 HEIGHT=1>

<p>

<br>


</TD>

</tr>
</table>
<!-- begin footer information -->
<br>
<CENTER>
<A HREF="http://www.codeguru.com/RealMedia/ads/click_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/845503367/468x60-2/Dice_Makeup_1b/jobs-468_new.gif/63613338666533643430333732616430" target="_top"><IMG SRC="http://www.codeguru.com/RealMedia/ads/Creatives/Dice_Makeup_1b/jobs-468_new.gif"  ALT=""  BORDER="0"></A><img src="http://www.codeguru.com/RealMedia/ads/adstream_lx.cgi/ew/ewsoftware/www.codeguru.com/net_general/MSILTut.html/845503367/468x60-2/Dice_Makeup_1b/jobs-468_new.gif/63613338666533643430333732616430?_RM_EMPTY_" Width="1" Height="1" Border="0">
<br>

			<table border="0" cellspacing="0" cellpadding="5" bgcolor="#FFFFFF" width="100%">
                <tr> 
                  <form method="POST" action="http://search.internet.com/www.jupiterweb.com">
                    <td align="center"><font size="-2" face="verdana, arial, helvetica"><b>Jupiterweb networks</b></font> 
                      <p> <a href="http://www.internet.com"><img src="/icom_includes/footers/icom_foot.gif" alt="internet.com" width="97" height="15" hspace="0" border="0" align="absmiddle"></a><img src="/icom_includes/footers/ruledivide_foot.gif" alt="" width="1" height="25" hspace="10" border="0" align="absmiddle"><a href="http://www.earthweb.com"><img src="/icom_includes/footers/earthweb_foot2.gif" alt="earthweb.com" width="93" height="12" hspace="5" border="0" align="absmiddle"></a><img src="/icom_includes/footers/ruledivide_foot.gif" alt="" width="1" height="25" hspace="10" border="0" align="absmiddle"><a href="http://www.devx.com"><img src="/icom_includes/footers/devx_foot2.gif" alt="Devx.com" width="35" height="30" hspace="0" border="0" align="absmiddle"></a><img src="/icom_includes/footers/ruledivide_foot.gif" alt="" width="1" height="25" hspace="10" border="0" align="absmiddle"><a href="http://www.clickz.com"><img src="/icom_includes/footers/clickz_foot2.gif" alt="ClickZ" width="55" height="24" hspace="0" border="0" align="absmiddle"></a><img src="/icom_includes/footers/ruledivide_foot.gif" alt="" width="1" height="25" hspace="10" border="0" align="absmiddle"><a href="http://www.arttoday.com"><img src="/icom_includes/footers/arttoday_foot2.gif" alt="" width="73" height="19" hspace="0" border="0" align="absmiddle"></a>
                      <p> 
                      <font size="-2" face="verdana, arial, helvetica"><b>Search Jupiterweb:</b> 
                      <input type="HIDDEN" name="IC_Summary" value="1">
                      <input type="HIDDEN" name="IC_StartNumber" value="0">
                      <input type="HIDDEN" name="IC_BatchSize" value="10">
                      <input type="HIDDEN" name="IC_RelevanceThreshold" value="50">
                      <input type="hidden" name="IC_QueryDatabase" value="all">
                      <input type="text" name="IC_QueryText" size="50">
                      <input type="image" border="0" value="Find" name="SUBMIT" src="/icom_includes/footers/but_find.gif" width="41" height="20" align="absmiddle">
                      </font>
                      <p><font size="-2" face="verdana, arial, helvetica"><span class="foot">Copyright <!--YEAR-->2004 Jupitermedia Corporation All Rights Reserved.</span><br>
                        <a href="http://www.internet.com/corporate/legal.html" class="foot">Legal 
                        Notices</a>, <a href="http://www.internet.com/corporate/reprints.html#Licensing1" class="foot">Licensing</a>, 
                        <a href="http://www.internet.com/corporate/reprints.html#Reprints1" class="foot">Reprints</a>, 
                        & <a href="http://www.internet.com/corporate/reprints.html#Permissions" class="foot">Permissions</a>, 
                        <a href="http://www.internet.com/corporate/privacy/privacypolicy.html" class="foot">Privacy 
                        Policy</a>. </font>
                      <p> <font size="-2" face="verdana, arial, helvetica"><a href="http://www.internet.com/corporate/" class="icomtb">Corporate 
                        Info</a> | <a href="http://e-newsletters.internet.com/" class="icomtb">Newsletters</a> 
                        | <a href="http://jobs.internet.com/" class="icomtb">Tech 
                        Jobs</a> | <a href="http://e-newsletters.internet.com/mailinglists.html" class="icomtb">E-mail 
                        Offers</a> 
                        <P>
<a href="http://www.internet.com/corporate/privacy/aup.html">Acceptable Use Policy</a>
<P>

                        </font>
                    </td>
                  </form>
                </tr>
              </table>
 



</CENTER>

</BODY>
</HTML>




