.assembly Exception {}

/*
// This program works as C# code:

            int x, y, z;
            string s;

            Console.WriteLine("Enter x:");
            s = Console.ReadLine();
            x = Int32.Parse(s);

            Console.WriteLine("Enter y:");
            s = Console.ReadLine();
            y = Int32.Parse(s);

            try
            {
                z = x / y;

                Console.WriteLine(z.ToString());
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

*/

.method static public void main() il managed
{
    .entrypoint

    .maxstack 8

    // ******************************************************
    // int x, y, z;
    // string s;
    // Exception e;     // generated by compiler
    // ******************************************************
    .locals ([0] int32 x,
             [1] int32 y,
             [2] int32 z,
             [3] string s,
             [4] class [mscorlib]System.Exception e)
             
    // ******************************************************
    // Console.WriteLine("Enter x:");
    // ******************************************************
    ldstr      "Enter x:"           // load string onto stack
    call       void [mscorlib]System.Console::WriteLine(string)
    
    // ******************************************************
    // s = Console.ReadLine();
    // ******************************************************
    call       string [mscorlib]System.Console::ReadLine()
    stloc.3             // store in var. 3
    
    
    // ******************************************************
    // x = Int32.Parse(s);
    // ******************************************************
    ldloc.3             // load var. 3
    call       int32 [mscorlib]System.Int32::Parse(string)
    stloc.0             // store to var. 0
    
    
    // ******************************************************
    // Same operations with y
    // Console.WriteLine("Enter y:");
    // s = Console.ReadLine();
    // y = Int32.Parse(s);
    // ******************************************************
    ldstr      "Enter y:"
    call       void [mscorlib]System.Console::WriteLine(string)
    call       string [mscorlib]System.Console::ReadLine()
    stloc.3
    ldloc.3
    call       int32 [mscorlib]System.Int32::Parse(string)
    stloc.1
    
    .try
    {
        // ************************************************
        // z = x / y;
        // ************************************************
        ldloc.0                 // load var. 0
        ldloc.1                 // load var. 1
        div                     // divide
        stloc.2                 // store in var. 2
        
        // ************************************************
        // Console.WriteLine(z.ToString());
        // ************************************************
        ldloca.s   z            // load address of z
        call       instance string [mscorlib]System.Int32::ToString()
        call       void [mscorlib]System.Console::WriteLine(string)
        
        // leave.s: Exit a protected region of code
        // (try, filter, or catch block).
        // Ordinary branch instructions can only be used in such a block 
        // to transfer control within it. 
        leave.s    END_TRY_CATCH
    }
    catch [mscorlib]System.Exception 
    {
        // Exception thrown from try block is on the stack.
        // Store it in variable e.
        stloc.s    e        
        
        // ************************************************
        // Console.WriteLine(e.Message);
        // ************************************************
        ldloc.s    e                // load e
        // call e.get_Message
        callvirt   instance string [mscorlib]System.Exception::get_Message()
        // call WriteLine
        call       void [mscorlib]System.Console::WriteLine(string)
        // Exit a protected region of code
        leave.s    END_TRY_CATCH
    }
    
    END_TRY_CATCH:
    
    // *****************************************************************
    ldstr "Press Enter to continue"
    call   void [mscorlib]System.Console::WriteLine(class System.String)
    call int32 [mscorlib]System.Console::Read()
    pop
    // *****************************************************************

    ret
}
